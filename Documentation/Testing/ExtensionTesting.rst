.. include:: /Includes.rst.txt
.. index:: pair: Testing; Extensions
.. _testing-extensions:

=================
Extension testing
=================

When developing TYPO3 extensions testing can greatly improve the code quality.

In theory you can test your extension like you would any other PHP application
and extensions. There are however some conventions that make contribution and
collaboration easier. And there are some tools that should make your life easier.

Which tools to use and which rules to apply is highly opinionated. However
having automatic test is better then no automatic tests no matter the strategy
you follow.

The following test strategies should be applied to improve your code quality.

..  contents:: Table of contents

..  seealso:: See also the :ref:`Testing enetcache <testing-tutorial-enetcache>`
    that used to be displayed on this page.

.. _testing-extensions-linting:

Linting
=======

A linting test ensures that the syntax of the language used is correct.

In TYPO3 extensions commonly the following formats are linted:

*   PHP in the supported versions
*   TypoScript
*   YAML
*   JavaScript / TypeScript

And other programming and configuration languages used.

..  todo: Add links to examples from blog extension and maybe others here

.. _testing-extensions-cgl:

Coding guidelines (CGL)
=======================

If more then one person is working on code, coding guideline are a must-have.
No matter which tool you use or which rules you choose to apply, it is important
that the rules can be applied automatically.

..  todo: Add links to examples from blog extension and maybe others here

.. _testing-extensions-static:

Static code analysis
====================

Static code analysis tools are highly recommended to be used with PHP. The most
common tools used are PHPStan and Psalm. No matter the tool you use or the
rules and levels you apply: You should use one.

There are also static code analysis tools for TypeScript and JavaScript.

..  todo: Link to a detailed chapter on static code analysis and to examples

.. _testing-extensions-unit:

Unit tests
==========

Unit tests are executing the code to be tested. They are run on an isolated
class or method. All relationships are mocked.

See also :ref:`Writing unit tests <testing-writing-unit>`

..  todo: Add examples

.. _testing-extensions-functional:

Functional tests
================

Functional tests also execute the code to be tested. The code is run in a
context as you would find it within a TYPO3 context.

Before each test a database is filled with test data, a set of system and
third party extensions is loaded. If needed a backend or frontend user can be
logged in.

A functional test will then test the output of a method or if a method changes
certain other things like the database or the file system.

See also :ref:`Writing functional tests <testing-writing-functional>`

..  todo: Add examples

.. _testing-extensions-acceptance:

Acceptance tests
================

Acceptance testing in TYPO3 world is about piloting a browser to click through
a frontend generated by TYPO3 or clicking through scenarios in the TYPO3 backend.

See also :ref:`Writing acceptance tests <testing-writing-acceptance>`
