..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
..  php:namespace::  TYPO3\CMS\Core\Cache\Frontend

..  php:interface:: FrontendInterface

    Contract for a Cache (frontend)

    ..  php:const:: TAG_CLASS
        :public:

        :php:`'%CLASS%'`, type string

        "Magic" tag for class-related entries

    ..  php:const:: TAG_PACKAGE
        :public:

        :php:`'%PACKAGE%'`, type string

        "Magic" tag for package-related entries

    ..  php:const:: PATTERN_ENTRYIDENTIFIER
        :public:

        :php:`'/^[a-zA-Z0-9_%\\-&]{1,250}$/'`, type string

        Pattern an entry identifier must match.

    ..  php:const:: PATTERN_TAG
        :public:

        :php:`'/^[a-zA-Z0-9_%\\-&]{1,250}$/'`, type string

        Pattern a tag must match.

    ..  php:method:: getIdentifier()
        :returns: `string`

        Returns this cache's identifier

        :Return description: The identifier for this cache

    ..  php:method:: getBackend()
        :returns: `\TYPO3\CMS\Core\Cache\Backend\BackendInterface`

        Returns the backend used by this cache

        :Return description: The backend used by this cache

    ..  php:method:: set(?string $entryIdentifier, ?mixed $data, array $tags = [], ?int $lifetime = NULL)

        Saves data in the cache.

        :param $entryIdentifier: Something which identifies the data - depends on concrete cache
        :param $data: The data to cache - also depends on the concrete cache implementation
        :param $tags: Tags to associate with this cache entry, default: []
        :param $lifetime: Lifetime of this cache entry in seconds. If NULL is specified, the default lifetime is used. "0" means unlimited lifetime., default: NULL

    ..  php:method:: get(?string $entryIdentifier)
        :returns: `mixed`

        Finds and returns data from the cache.

        :param $entryIdentifier: Something which identifies the cache entry - depends on concrete cache

    ..  php:method:: has(?string $entryIdentifier)
        :returns: `bool`

        Checks if a cache entry with the specified identifier exists.

        :param $entryIdentifier: An identifier specifying the cache entry
        :Return description: TRUE if such an entry exists, FALSE if not

    ..  php:method:: remove(?string $entryIdentifier)
        :returns: `bool`

        Removes the given cache entry from the cache.

        :param $entryIdentifier: An identifier specifying the cache entry
        :Return description: TRUE if such an entry exists, FALSE if not

    ..  php:method:: flush()

        Removes all cache entries of this cache.

    ..  php:method:: flushByTag(?string $tag)

        Removes all cache entries of this cache which are tagged by the specified tag.

        :param $tag: The tag the entries must have

    ..  php:method:: flushByTags(array $tags)

        Removes all cache entries of this cache which are tagged by any of the specified tags.

        :param $tags: List of tags

    ..  php:method:: collectGarbage()

        Does garbage collection

    ..  php:method:: isValidEntryIdentifier(?string $identifier)
        :returns: `bool`

        Checks the validity of an entry identifier. Returns TRUE if it's valid.

        :param $identifier: An identifier to be checked for validity

    ..  php:method:: isValidTag(?string $tag)
        :returns: `bool`

        Checks the validity of a tag. Returns TRUE if it's valid.

        :param $tag: A tag to be checked for validity
