..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
..  php:namespace::  TYPO3\CMS\Core\Session

..  php:class:: UserSession

    Represents all information about a user's session.

    A user session can be bound to a frontend / backend user, or an anonymous session based on session data stored
    in the session backend.

    If a session is anonymous, it can be fixated by storing the session in the backend, but only if there
    is data in the session.

    if a session is user-bound, it is automatically fixated.

    The `$isNew` flag is meant to show that this user session object was not
    fetched from the session backend, but initialized in the first place by
    the current request.

    The `$data` argument stores arbitrary data valid for the user's session.

    A permanent session is not issued by a session-based cookie but a
    time-based cookie. The session might be persisted in the user's browser.

    ..  php:method:: getIdentifier()
        :returns: string the session ID. This is the `ses_id` respectively the `AbstractUserAuthentication->id`

    ..  php:method:: getUserId()
        :returns: ?int the user ID the session belongs to. Can also return `0` or `NULL` Which indicates an anonymous session. This is the `ses_userid`.

    ..  php:method:: getLastUpdated()
        :returns: int the timestamp of the last session data update. This is the `ses_tstamp`.

    ..  php:method:: set(string $key, ?mixed $value)

        Sets or updates session data value for a given `$key`. It is also
        internally used if calling `AbstractUserAuthentication->setSessionData()`

        :param $key: The key whose value should be updated
        :param $value: The value or `NULL` to unset the key

    ..  php:method:: hasData()
        :returns: bool

        Checks whether the session has data assigned

    ..  php:method:: get(string $key)

        Returns the session data for the given `$key` or `NULL` if the key does
        not exist. It is internally used if calling
        `AbstractUserAuthentication->getSessionData()`

        :param $key: the key

    ..  php:method:: getData()
        :returns: array the whole data array.

    ..  php:method:: overrideData(array $data)

        Overrides the whole data array. Can also be used to unset the array.

        This also sets the `$wasUpdated` pointer to `true`

        :param $data: the data

    ..  php:method:: dataWasUpdated()
        :returns: bool

        Checks whether the session data has been updated

    ..  php:method:: isAnonymous()
        :returns: bool

        Checks if the user session is an anonymous one. This means, the
        session does not belong to a logged-in user

    ..  php:method:: getIpLock()
        :returns: string the `ipLock` state of the session

    ..  php:method:: isNew()
        :returns: bool

        Checks whether the session is marked as new

    ..  php:method:: isPermanent()
        :returns: bool

        Checks whether the session was marked as permanent

    ..  php:method:: needsUpdate()
        :returns: bool

        Checks whether the session has to be updated

    ..  php:method:: getJwt(?TYPO3\CMS\Core\Http\CookieScope $scope = NULL)
        :returns: string the session ID wrapped in JWT to be used for emitting a new cookie

        Gets session ID wrapped in JWT to be used for emitting a new cookie.

        `Cookie: <JWT(HS256, [identifier => <session-id>], <signature(encryption-key, cookie-domain)>)>`

        :param $scope: the scope, default: NULL

    ..  php:method:: createFromRecord(string $id, array $record, bool $markAsNew = false)
        :returns: self

        Creates a new user session based on the provided session record

        :param $id: the session identifier
        :param $record: the record
        :param $markAsNew: the markAsNew, default: false

    ..  php:method:: createNonFixated(string $identifier)
        :returns: self

        Creates a non fixated user session. This means the
        session does not belong to a logged-in user

        :param $identifier: the identifier

    ..  php:method:: resolveIdentifierFromJwt(string $cookieValue, TYPO3\CMS\Core\Http\CookieScope $scope)
        :returns: non-empty-string|null session ID, null in case verification failed

        Verifies and resolves the session ID from a submitted cookie value:
        `Cookie: <JWT(HS256, [identifier => <session-id>], <signature(encryption-key, cookie-domain)>)>`

        :param $cookieValue: submitted cookie value
        :param $scope: the scope
