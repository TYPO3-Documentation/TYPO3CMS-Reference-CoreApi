.. Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets 
.. php:namespace::  TYPO3\CMS\Core\Session

.. php:class:: UserSessionManager

   The purpose of the UserSessionManager is to create new user session objects (acting as a factory),
   depending on the need / request, and to fetch sessions from the session backend, effectively
   encapsulating all calls to the `SessionManager`.
   
   The UserSessionManager can be retrieved using its static factory method create():
   
   ..  code-block:: php
       
       use TYPO3\CMS\Core\Session\UserSessionManager
       
       $loginType = 'BE'; // or 'FE' for frontend
       $userSessionManager = UserSessionManager::create($loginType);
       

   
   
   .. php:method:: createFromRequestOrAnonymous(Psr\\Http\\Message\\ServerRequestInterface $request, string $cookieName)
   
      Creates and returns a session from the given request. If the given
      `$cookieName` can not be obtained from the request an anonymous
      session will be returned.
      
      :param Psr\\Http\\Message\\ServerRequestInterface $request: the request
      :param string $cookieName: Name of the cookie that might contain the session
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: An existing session if one is stored in the cookie, an anonymous session otherwise
      
   .. php:method:: createAnonymousSession()
   
      Creates and returns an anonymous session object (which is not persisted)
      
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: hasExpired(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Checks whether a session has expired. This is also the case if `sessionLifetime` is `0`
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: bool
      
   .. php:method:: willExpire(TYPO3\\CMS\\Core\\Session\\UserSession $session, int $gracePeriod)
   
      Checks whether a given user session will expire within the given grace period
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :param int $gracePeriod: in seconds
      :returntype: bool
      
   .. php:method:: fixateAnonymousSession(TYPO3\\CMS\\Core\\Session\\UserSession $session, bool $isPermanent = false)
   
      Persists an anonymous session without a user logged-in,
      in order to store session data between requests
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: The user session to fixate
      :param bool $isPermanent: If `true`, the session will get the `ses_permanent` flag, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: a new session object with an updated `ses_tstamp` (allowing to keep the session alive)
      
   .. php:method:: elevateToFixatedUserSession(TYPO3\\CMS\\Core\\Session\\UserSession $session, int $userId, bool $isPermanent = false)
   
      Removes existing entries, creates and returns a new user session object.
      
      See `regenerateSession()` below.
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: The user session to recreate
      :param int $userId: The user id the session belongs to
      :param bool $isPermanent: If `true`, the session will get the `ses_permanent` flag, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: The newly created user session object
      
   .. php:method:: regenerateSession(string $sessionId, array $existingSessionRecord = [], bool $anonymous = false)
   
      Regenerates the given session. This method should be used whenever a
      user proceeds to a higher authorization level, for example when an
      anonymous session is now authenticated.
      
      :param string $sessionId: The session id
      :param array $existingSessionRecord: If given, this session record will be used instead of fetching again, default: []
      :param bool $anonymous: If true session will be regenerated as anonymous session, default: false
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: updateSessionTimestamp(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Updates the session timestamp for the given user session if the session
      is marked as "needs update" (which means the current timestamp is
      greater than "last updated + a specified grace-time").
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: a modified user session with a last updated value if needed
      
   .. php:method:: isSessionPersisted(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Checks whether a given session is already persisted
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: bool
      
   .. php:method:: removeSession(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Removes a given session from the session backend
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      
   .. php:method:: updateSession(TYPO3\\CMS\\Core\\Session\\UserSession $session)
   
      Updates the session data + timestamp in the session backend
      
      :param TYPO3\\CMS\\Core\\Session\\UserSession $session: the session
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: collectGarbage(int $garbageCollectionProbability = 1)
   
      Calls the session backends `collectGarbage()` method
      
      :param int $garbageCollectionProbability: the garbageCollectionProbability, default: 1
      
   .. php:method:: create(string $loginType, int $sessionLifetime = NULL, TYPO3\\CMS\\Core\\Session\\SessionManager $sessionManager = NULL, TYPO3\\CMS\\Core\\Authentication\\IpLocker $ipLocker = NULL)
   
      Creates a `UserSessionManager` instance for the given login type. Has
      several optional arguments used for testing purposes to inject dummy
      objects if needed.
      
      Ideally, this factory encapsulates all `TYPO3_CONF_VARS` options, so
      the actual object does not need to consider any global state.
      
      :param string $loginType: the loginType
      :param int $sessionLifetime: the sessionLifetime, default: NULL
      :param TYPO3\\CMS\\Core\\Session\\SessionManager $sessionManager: the sessionManager, default: NULL
      :param TYPO3\\CMS\\Core\\Authentication\\IpLocker $ipLocker: the ipLocker, default: NULL
      :returntype: self
      
   .. php:method:: setLogger(Psr\\Log\\LoggerInterface $logger)
   
      Sets a logger.
      
      :param Psr\\Log\\LoggerInterface $logger: the logger
