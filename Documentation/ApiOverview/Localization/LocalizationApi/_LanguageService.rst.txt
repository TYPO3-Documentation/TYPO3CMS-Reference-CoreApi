..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
..  php:namespace::  TYPO3\CMS\Core\Localization

..  php:class:: LanguageService

    Main API to fetch labels from XLF (label files) based on the current system
    language of TYPO3. It is able to resolve references to files + their pointers to the
    proper language. If you see something about "LLL", this class does the trick for you. It
    is not related to language handling of content, but rather of labels for plugins.

    Usually this is injected into $GLOBALS['LANG'] when in backend or CLI context, and
    populated by the current backend user. Do not rely on $GLOBAL['LANG'] in frontend, as it is only
    available under certain circumstances!
    In frontend, this is also used to translate "labels", see TypoScriptFrontendController->sL()
    for that.

    As TYPO3 internally does not match the proper ISO locale standard, the "locale" here
    is actually a list of supported language keys, (see Locales class), whereas "English"
    has the language key "default".

    Further usages on setting up your own LanguageService in BE:

    ..  code-block:: php

        $languageService = GeneralUtility::makeInstance(LanguageServiceFactory::class)
            ->createFromUserPreferences($GLOBALS['BE_USER']);

    ..  php:attr:: lang
        :public:

        This is set to the language that is currently running for the user

    ..  php:method:: sL(?string $input)
        :returns: `string`

        Main and most often used method.

        Resolve strings like these:

        ..  code-block:: php

            'LLL:EXT:core/Resources/Private/Language/locallang_core.xlf:labels.depth_0'

        This looks up the given .xlf file path in the 'core' extension for label labels.depth_0

        Only the plain string contents of a language key, like "Record title: %s" are returned.
        Placeholder interpolation must be performed separately, for example via `sprintf()`, like
        `LocalizationUtility::translate()` does internally (which should only be used in Extbase
        context)

        Example:
        Label is defined in `EXT:my_ext/Resources/Private/Language/locallang.xlf` as:

        ..  code-block:: php

            <trans-unit id="downloaded_times">
                <source>downloaded %d times from %s locations</source>
            </trans-unit>

        The following code example assumes `$this->request` to hold the current request object.
        There are several ways to create the LanguageService using the Factory, depending on the
        context. Please adjust this example to your use case:

        ..  code-block:: php

            $language = $this->request->getAttribute('language');
            $languageService =
              GeneralUtility::makeInstance(LanguageServiceFactory::class)
              ->createFromSiteLanguage($language);
            $label = sprintf(
                 $languageService->sL(
                     'LLL:EXT:my_ext/Resources/Private/Language/locallang.xlf:downloaded_times'
                 ),
                 27,
                 'several'
            );

        This will result in `$label` to contain `'downloaded 27 times from several locations'`.

        :param $input: Label key/reference

    ..  php:method:: overrideLabels(string $fileRef, array $labels)

        Define custom labels which can be overridden for a given file. This is typically
        the case for TypoScript plugins.

        :param $fileRef: the fileRef
        :param $labels: the labels

    ..  php:method:: getLocale()
        :returns: `?\TYPO3\CMS\Core\Localization\Locale`
