.. Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
.. php:namespace::  TYPO3\CMS\Core\Database\Query\Expression

.. php:class:: ExpressionBuilder
   :noindex:

   .. php:method:: eq(string $fieldName, mixed $value)

      Creates an equality comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: neq(string $fieldName, mixed $value)

      Creates a non equality comparison expression with the given arguments.

      First argument is considered the left expression and the second is the right expression.
      When converted to string, it will generate a <left expr> <> <right expr>. Example::

          [php]
          // u.id <> 1
          $q->where($q->expr()->neq('u.id', '1'));

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: lt(string $fieldName, mixed $value)

      Creates a lower-than comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: lte(string $fieldName, mixed $value)

      Creates a lower-than-equal comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: gt(string $fieldName, mixed $value)

      Creates a greater-than comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: gte(string $fieldName, mixed $value)

      Creates a greater-than-equal comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: isNull(string $fieldName)

      Creates an IS NULL expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :returntype: `string`

   .. php:method:: isNotNull(string $fieldName)

      Creates an IS NOT NULL expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :returntype: `string`

   .. php:method:: like(string $fieldName, mixed $value, string $escapeChar = NULL)

      Creates a LIKE() comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: Argument to be used in LIKE() comparison. No automatic quoting/escaping is done.
      :param string $escapeChar: the escapeChar, default: NULL
      :returntype: `string`

   .. php:method:: notLike(string $fieldName, mixed $value, string $escapeChar = NULL)

      Creates a NOT LIKE() comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: Argument to be used in NOT LIKE() comparison. No automatic quoting/escaping is done.
      :param string $escapeChar: the escapeChar, default: NULL
      :returntype: `string`

   .. php:method:: in(string $fieldName, string|array $value)

      Creates an IN () comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param string|array $value: The placeholder or the array of values to be used by IN() comparison.
      No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: notIn(string $fieldName, string|array $value)

      Creates a NOT IN () comparison expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param string|array $value: The placeholder or the array of values to be used by NOT IN() comparison.
      No automatic quoting/escaping is done.
      :returntype: `string`

   .. php:method:: inSet(string $fieldName, string $value, bool $isColumn = false)

      Returns a comparison that can find a value in a list field (CSV).

      :param string $fieldName: The field name. Will be quoted according to database platform automatically.
      :param string $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
      :param bool $isColumn: Set when the value to compare is a column on a table to activate casting, default: false
      :returntype: `string`

   .. php:method:: notInSet(string $fieldName, string $value, bool $isColumn = false)

      Returns a comparison that can find a value in a list field (CSV) but is negated.

      :param string $fieldName: The field name. Will be quoted according to database platform automatically.
      :param string $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
      :param bool $isColumn: Set when the value to compare is a column on a table to activate casting, default: false
      :returntype: `string`

   .. php:method:: bitAnd(string $fieldName, int $value)

      Creates a bitwise AND expression with the given arguments.

      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param int $value: Argument to be used in the bitwise AND operation
      :returntype: `string`
