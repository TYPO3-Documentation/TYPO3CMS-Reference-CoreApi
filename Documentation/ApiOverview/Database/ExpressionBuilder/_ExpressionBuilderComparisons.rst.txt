..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
..  php:namespace::  TYPO3\CMS\Core\Database\Query\Expression

..  php:class:: ExpressionBuilder
    :noindex:

    ..  php:method:: eq(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates an equality comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: neq(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates a non equality comparison expression with the given arguments.

        First argument is considered the left expression and the second is the right expression.
        When converted to string, it will generate a <left expr> <> <right expr>. Example::

            [php]
            // u.id <> 1
            $q->where($q->expr()->neq('u.id', '1'));

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: lt(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates a lower-than comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: lte(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates a lower-than-equal comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: gt(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates a greater-than comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: gte(string $fieldName, ?mixed $value)
        :returns: `string`

        Creates a greater-than-equal comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The value. No automatic quoting/escaping is done.

    ..  php:method:: isNull(string $fieldName)
        :returns: `string`

        Creates an IS NULL expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.

    ..  php:method:: isNotNull(string $fieldName)
        :returns: `string`

        Creates an IS NOT NULL expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.

    ..  php:method:: like(string $fieldName, ?mixed $value, ?string $escapeChar = NULL)
        :returns: `string`

        Creates a LIKE() comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: Argument to be used in LIKE() comparison. No automatic quoting/escaping is done.
        :param $escapeChar: the escapeChar, default: NULL

    ..  php:method:: notLike(string $fieldName, ?mixed $value, ?string $escapeChar = NULL)
        :returns: `string`

        Creates a NOT LIKE() comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: Argument to be used in NOT LIKE() comparison. No automatic quoting/escaping is done.
        :param $escapeChar: the escapeChar, default: NULL

    ..  php:method:: in(string $fieldName, ?string|array $value)
        :returns: `string`

        Creates an IN () comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The placeholder or the array of values to be used by IN() comparison.No automatic quoting/escaping is done.

    ..  php:method:: notIn(string $fieldName, ?string|array $value)
        :returns: `string`

        Creates a NOT IN () comparison expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: The placeholder or the array of values to be used by NOT IN() comparison.No automatic quoting/escaping is done.

    ..  php:method:: inSet(string $fieldName, string $value, bool $isColumn = false)
        :returns: `string`

        Returns a comparison that can find a value in a list field (CSV).

        :param $fieldName: The field name. Will be quoted according to database platform automatically.
        :param $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
        :param $isColumn: Set when the value to compare is a column on a table to activate casting, default: false

    ..  php:method:: notInSet(string $fieldName, string $value, bool $isColumn = false)
        :returns: `string`

        Returns a comparison that can find a value in a list field (CSV) but is negated.

        :param $fieldName: The field name. Will be quoted according to database platform automatically.
        :param $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
        :param $isColumn: Set when the value to compare is a column on a table to activate casting, default: false

    ..  php:method:: bitAnd(string $fieldName, int $value)
        :returns: `string`

        Creates a bitwise AND expression with the given arguments.

        :param $fieldName: The fieldname. Will be quoted according to database platform automatically.
        :param $value: Argument to be used in the bitwise AND operation
