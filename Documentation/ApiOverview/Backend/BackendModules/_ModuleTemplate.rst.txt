..  Generated by https://github.com/TYPO3-Documentation/t3docs-codesnippets
..  php:namespace::  TYPO3\CMS\Backend\Template

..  php:class:: ModuleTemplate

    A class taking care of the "outer" HTML of a module, especially
    the doc header and other related parts.

    ..  php:method:: assign(string $key, ?mixed $value)
        :returns: self

        Add a variable to the view data collection.

        :param $key: the key
        :param $value: the value

    ..  php:method:: assignMultiple(array $values)
        :returns: self

        Add multiple variables to the view data collection.

        :param $values: the values

    ..  php:method:: render(string $templateFileName = '')
        :returns: string

        Render the module.

        :param $templateFileName: the templateFileName, default: ''

    ..  php:method:: renderResponse(string $templateFileName = '')
        :returns: Psr\Http\Message\ResponseInterface

        Render the module and create an HTML 200 response from it. This is a
        lazy shortcut so controllers don't need to take care of this in the backend.

        :param $templateFileName: the templateFileName, default: ''

    ..  php:method:: setBodyTag(string $bodyTag)
        :returns: self

        Set to something like '<body id="foo">' when a special body tag is needed.

        :param $bodyTag: the bodyTag

    ..  php:method:: setTitle(string $title, string $context = '')
        :returns: self

        Title string of the module: "My module Â· Edit view"

        :param $title: the title
        :param $context: the context, default: ''

    ..  php:method:: getDocHeaderComponent()
        :returns: TYPO3\CMS\Backend\Template\Components\DocHeaderComponent

        Get the DocHeader. Can be used in controllers to add custom
        buttons / menus / ... to the doc header.

    ..  php:method:: setForm(string $formTag = '')
        :returns: self

        A "<form>" tag encapsulating the entire module, including doc-header.

        :param $formTag: the formTag, default: ''

    ..  php:method:: setModuleId(string $moduleId)
        :returns: self

        Optional 'data-module-id="{moduleId}"' on first <div> in body.

        Can be helpful in JavaScript.

        :param $moduleId: the moduleId

    ..  php:method:: setModuleName(string $moduleName)
        :returns: self

        Optional 'data-module-name="{moduleName}"' on first <div> in body.

        Can be helpful in JavaScript.

        :param $moduleName: the moduleName

    ..  php:method:: setModuleClass(string $moduleClass)
        :returns: self

        Optional 'class="module {moduleClass}"' on first <div> in body.

        Can be helpful styling modules.

        :param $moduleClass: the moduleClass

    ..  php:method:: addFlashMessage(string $messageBody, string $messageTitle = '', TYPO3\CMS\Core\Type\ContextualFeedbackSeverity $severity = \TYPO3\CMS\Core\Type\ContextualFeedbackSeverity::OK, bool $storeInSession = true)
        :returns: self

        Creates a message object and adds it to the FlashMessageQueue.

        These messages are automatically rendered when the view is rendered.

        :param $messageBody: the messageBody
        :param $messageTitle: the messageTitle, default: ''
        :param $severity: the severity, default: \TYPO3\CMS\Core\Type\ContextualFeedbackSeverity::OK
        :param $storeInSession: the storeInSession, default: true

    ..  php:method:: setFlashMessageQueue(TYPO3\CMS\Core\Messaging\FlashMessageQueue $flashMessageQueue)
        :returns: self

        ModuleTemplate by default uses queue 'core.template.flashMessages'. Modules
        may want to maintain an own queue. Use this method to render flash messages
        of a non-default queue at the default position in module HTML output. Call
        this method *before* adding single messages with addFlashMessage().

        :param $flashMessageQueue: the flashMessageQueue

    ..  php:method:: setUiBlock(bool $uiBlock)
        :returns: self

        UI block is a spinner shown during browser rendering phase of the module,
        automatically removed when rendering finished. This is done by default,
        but the UI block can be turned off when needed for whatever reason.

        :param $uiBlock: the uiBlock

    ..  php:method:: makeDocHeaderModuleMenu(array $additionalQueryParams = [])
        :returns: self

        Generates a menu in the docheader to access third-level modules

        :param $additionalQueryParams: the additionalQueryParams, default: []
